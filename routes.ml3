Migrant(
  capital : real,
  in_transit : bool,
  steps : int // counts moves made
)

Location(
  x : real,
  y : real,
  type : {"std", "entry", "exit"},
  quality : real,
  resources : real,
  visits : int, // incomming moves
  communication : int, // counts communication initiated by migrants here
  moves : int // counts outgoing moves
)

Information(
  quality : real,
  resources : real,
  quality_trust : real,
  resources_trust : real
)

Link(
  type : {"slow", "fast"},
  friction : real,
  distance : real,
  visits : int // counts moves going through
)

InfoLink(
  friction : real,
  friction_trust : real
)


singleton World(
  contacts_made : int
)

location:Location[1]<->[n]Migrant:migrants // migrants to locations
destination:Location[1]<->[n]Migrant:incoming // migrants on the move linked to their distination
links:Link[n]<->[n]Location:endpoints // location to the link object to another location
knowledge:Information[n]<->[1]Migrant:owner // migrants to their knowledge
link_knowledge:InfoLink[n]<->[1]Migrant:owner // migrants to their knowledge
subject:Location[1]<->[n]Information:information // pieces of information to the subject location
subject:Link[1]<->[n]InfoLink:information // pieces of information to the subject link
contacts:Migrant[n]<->[n]Migrant:contacters // contact network

rate_dep	 	: real	:= 10 // 20 // number of departures per time step

dist_scale_slow : real	:= 10.0 // scale >= 1.0 required, otherwise path finding breaks
dist_scale_fast : real  := 1.0
frict_range		: real	:= 0.5 // stochastic range of friction

n_ini_contacts	: int	:= 10
ini_capital 	: real 	:= 2000.0
p_know_target	: real	:= 0.0

res_exp			: real	:= 0.5
qual_exp		: real	:= 0.5
frict_exp_fast  : real	:= 1.25
frict_exp_slow  : real	:= 12.5
p_find_links	: real	 := 0.5
// trust_found_links : real := 0.5
p_find_dests	: real	 := 0.3
trust_travelled	: real	 := 0.8
speed_expl_stay : real	 := 0.5
speed_expl_move : real	 := 0.5

costs_stay		: real	 := 1.0
ben_resources	: real 	 := 5.0
costs_move		: real	 := 2.0

qual_weight_x	: real	 := 0.5
qual_weight_res	: real   := 0.1
qual_weight_frict : real := 0.1

p_keep_contact 	: real 	:= 0.3
// p_info_mingle	: real	:= 0.3
p_info_contacts	: real	:= 0.3
// p_transfer_info	: real	:= 0.3
n_contacts_max	: int	:= 50
// arr_learn		: real	:= 0.0
convince		: real	:= 0.5 // change doubt into belief
convert			: real	:= 0.1 // change belief into other belief
confuse			: real	:= 0.3 // change belief into doubt
error			: real 	:= 0.1 // stochastic error when transmitting information
weight_arr		: real	:= 1.0

expl_rate : real := 1
cost_rate : real := 1
transit_rate : real := 1

// accuracy is euclidean distance between knowledge and reality
Information.accuracy() : real :=
  sqrt((ego.quality - ego.subject.quality) ^ 2 + (ego.resources - ego.subject.resources) ^ 2)
InfoLink.accuracy() : real :=
  sqrt((ego.friction - ego.subject.friction) ^ 2)
World.average_accuracy() : real :=
  Information.all.sum(alter.accuracy()) / Information.all.size()
World.average_accuracy_link() : real :=
  InfoLink.all.sum(alter.accuracy()) / InfoLink.all.size()
Location.accuracy_about() : real :=
  if (ego.information.size() > 0) then ego.information.sum(alter.accuracy()) / ego.information.size() else -1
Link.accuracy_about() : real :=
  if (ego.information.size() > 0) then ego.information.sum(alter.accuracy()) / ego.information.size() else -1


Link.other_side(?loc : Location) : Location :=
  ego.endpoints.filter(?loc != alter).only()

Migrant.knows(?loc : Location) : bool :=
  ego.knowledge.filter(alter.subject = ?loc).size() >= 1

// error, if they don't know the location
Migrant.knowledge_about(?loc : Location) : Information :=
  ego.knowledge.filter(alter.subject = ?loc).only()

/*
 * ACTIVITIES WHILE STAYING
 */
// (== exchange_info)
Migrant.exchange_info(?other : Migrant) ->
  ego.location.communication += 1
  ?egoExclusive := ego.knowledge.filter(!?other.knows(alter.subject))
  ?otherExclusive := ?other.knowledge.filter(!ego.knows(alter.subject))
  ?otherArrived := ?other.location.type = "exit"
  // ego discover's the places other knows
  for each ?info in ?otherExclusive
    ego.discover_location(?info.subject)
  end
  // other discovers the places ego knows
  if (!?otherArrived) then
    for each ?info in ?egoExclusive
      ?other.discover_location(?info.subject)
    end
  end
  // exchange knowledge about the places both know now
  for each ?info in ego.knowledge.filter(?other.knows(alter.subject))
    ?otherInfo := ?other.knowledge.filter(?info.subject = alter.subject).only()
    ego.exchange_beliefs(?info, ?otherInfo, ?otherArrived)
  end
  // link knowledge
  ?egoExclusive_link := ego.link_knowledge.filter(!?other.knows_link(alter.subject))
  ?otherExclusive_link := ?other.link_knowledge.filter(!ego.knows_link(alter.subject))
  // ego discover's the links other knows
  for each ?info in ?otherExclusive_link
    if (?info.subject.endpoints.filter(ego.knows(alter)).size() = 2) then
      ego.discover_link(?info.subject)
    end
  end
  // other discovers the links ego knows
  if (!?otherArrived) then
    for each ?info in ?egoExclusive_link
      if (?info.subject.endpoints.filter(?other.knows(alter)).size() = 2) then
        ?other.discover_link(?info.subject)
      end
    end
  end
  // exchange knowledge about the links both know now
  for each ?info in ego.link_knowledge.filter(?other.knows_link(alter.subject))
    ?otherInfo := ?other.link_knowledge.filter(?info.subject = alter.subject).only()
    ego.exchange_beliefs_link(?info, ?otherInfo, ?otherArrived)
  end

Migrant.exchange_beliefs(?i1 : Information, ?i2 : Information, ?arrived : bool) ->
  // agent 1 evaluated the information differently, if agent 2 has already arrived (agent 1 definitely did not arrive yet)
  ?convince1 := if (?arrived) then convince^(1 / weight_arr) else convince
  ?convert1 := if (?arrived) then convert^(1 / weight_arr) else convince
  ?confuse1 := convince
  ?v2_q_pcv := ego.v_pcv(?i2.quality)
  ?v2_r_pcv := ego.v_pcv(?i2.resources)
  ?t2_q_pcv := ego.t_pcv(?i2.quality_trust)
  ?t2_r_pcv := ego.t_pcv(?i2.resources_trust)
  ?v1_q := ego.receive_value(?i1.quality, ?i1.quality_trust, ?v2_q_pcv, ?t2_q_pcv, ?convince1, ?convert1, ?confuse1)
  ?v1_r := ego.receive_value(?i1.resources, ?i1.resources_trust, ?v2_r_pcv, ?t2_r_pcv, ?convince1, ?convert1, ?confuse1)
  ?d1_q := ego.receive_doubt(?i1.quality, ?i1.quality_trust, ?v2_q_pcv, ?t2_q_pcv, ?convince1, ?convert1, ?confuse1)
  ?d1_r := ego.receive_doubt(?i1.resources, ?i1.resources_trust, ?v2_r_pcv, ?t2_r_pcv, ?convince1, ?convert1, ?confuse1)
  ?i1.quality := ?v1_q / (1 - ?d1_q)
  ?i1.quality_trust := 1 - ?d1_q
  ?i1.resources := ?v1_r / (1 - ?d1_r)
  ?i1.resources_trust := 1 - ?d1_r
  // agent 2 does not update their knowledge, if they have arrived
  if (!?arrived) then
    ?v1_q_pcv := ego.v_pcv(?i1.quality)
    ?v1_r_pcv := ego.v_pcv(?i1.resources)
    ?t1_q_pcv := ego.t_pcv(?i1.quality_trust)
    ?t1_r_pcv := ego.t_pcv(?i1.resources_trust)
    ?v2_q := ego.receive_value(?i2.quality, ?i2.quality_trust, ?v1_q_pcv, ?t1_q_pcv, convince, convert, confuse)
    ?v2_r := ego.receive_value(?i2.resources, ?i2.resources_trust, ?v1_r_pcv, ?t1_r_pcv, convince, convert, confuse)
    ?d2_q := ego.receive_doubt(?i2.quality, ?i2.quality_trust, ?v1_q_pcv, ?t1_q_pcv, convince, convert, confuse)
    ?d2_r := ego.receive_doubt(?i2.resources, ?i2.resources_trust, ?v1_r_pcv, ?t1_r_pcv, convince, convert, confuse)
    ?i2.quality := ?v2_q / (1 - ?d2_q)
    ?i2.quality_trust := 1 - ?d2_q
    ?i2.resources := ?v2_r / (1 - ?d2_r)
    ?i2.resources_trust := 1 - ?d2_r
  end

Migrant.exchange_beliefs_link(?i1 : InfoLink, ?i2 : InfoLink, ?arrived : bool) ->
  // agent 1 evaluated the information differently, if agent 2 has already arrived (agent 1 definitely did not arrive yet)
  ?convince1 := if (?arrived) then convince^(1 / weight_arr) else convince
  ?convert1 := if (?arrived) then convert^(1 / weight_arr) else convince
  ?confuse1 := convince
  ?v2_pcv := ego.v_pcv(?i2.friction)
  ?t2_pcv := ego.t_pcv(?i2.friction_trust)
  ?v1 := ego.receive_value(?i1.friction, ?i1.friction_trust, ?v2_pcv, ?t2_pcv, ?convince1, ?convert1, ?confuse1)
  ?d1 := ego.receive_doubt(?i1.friction, ?i1.friction_trust, ?v2_pcv, ?t2_pcv, ?convince1, ?convert1, ?confuse1)
  ?i1.friction := ?v1 / (1 - ?d1)
  ?i1.friction_trust := 1 - ?d1
  // agent 2 does not update their knowledge, if they have arrived
  if (!?arrived) then
    ?v1_pcv := ego.v_pcv(?i1.friction)
    ?t1_pcv := ego.t_pcv(?i1.friction_trust)
    ?v2 := ego.receive_value(?i2.friction, ?i2.friction_trust, ?v1_pcv, ?t1_pcv, convince, convert, confuse)
    ?d2 := ego.receive_doubt(?i2.friction, ?i2.friction_trust, ?v1_pcv, ?t1_pcv, convince, convert, confuse)
    ?i2.friction := ?v2 / (1 - ?d2)
    ?i2.friction_trust := 1 - ?d2
  end

Migrant.receive_value(?v1 : real, ?t1 : real, ?v2_pcv : real, ?t2_pcv : real, ?ci : real, ?ce : real, ?cu : real) : real :=
  ?t * ?d_pcv * ?v + ?d * ?t_pcv * ?ci * ?v_pcv + ?t * ?t_pcv * (1.0 - ?cu * ?dist_pcv) * ((1.0 - ?ce) * ?v + ?ce * ?v_pcv)
where ?t := ?t1
      ?d := 1 - ?t
      ?v := ?v1
      ?t_pcv := ?t2_pcv
      ?d_pcv := 1.0 - ?t_pcv
      ?v_pcv := ?v2_pcv
      ?dist_pcv := abs(?v-?v_pcv) / (?v + ?v_pcv + 0.00001)

Migrant.receive_doubt(?v1 : real, ?t1 : real, ?v2_pcv : real, ?t2_pcv : real, ?ci : real, ?ce : real, ?cu : real) : real :=
  ?d * ?d_pcv + ?d * ?t_pcv * (1.0 - ?ci) + ?t * ?t_pcv * ?cu * ?dist_pcv
where ?t := ?t1
      ?d := 1 - ?t
      ?v := ?v1
      ?t_pcv := ?t2_pcv
      ?d_pcv := 1.0 - ?t_pcv
      ?v_pcv := ?v2_pcv
      ?dist_pcv := abs(?v-?v_pcv) / (?v + ?v_pcv + 0.00001)

Migrant.t_pcv(?t : real) : real := ego.limit(0.000001, ?t + ego.unf_delta(error), 0.99999)
Migrant.v_pcv(?v : real) : real := max(0.0, ?v + ego.unf_delta(error))
Migrant.unf_delta(?x : real) : real := random() * 2 * ?x - ?x
Migrant.limit(?mi : real, ?v : real, ?ma : real) : real := min(?ma, max(?v, ?mi))

Migrant.discover_location(?loc : Location) ->
  ?k := new Information()
  ?k.owner := ego
  ?k.subject := ?loc
  ?k.quality := qual_exp
  ?k.quality_trust := 0.00001
  ?k.resources := res_exp
  ?k.resources_trust := 0.00001

Migrant.discover_link(?link : Link) ->
  ?k := new InfoLink()
  ?k.owner := ego
  ?k.subject := ?link
  ?k.friction := if ?link.type = "slow" then ?link.distance * frict_exp_slow else ?link.distance * frict_exp_fast
  ?k.friction_trust := 0.00001

// (== costs_stay)
Migrant
  | !ego.in_transit
  @ cost_rate
  -> ego.capital += ben_resources * ego.location.resources - costs_stay

// (== explore)
Migrant
 | !ego.in_transit
 @ expl_rate
 -> ego.explore_at(ego.location, speed_expl_stay, true)

// explore at a location, possibly explore adjacent links
Migrant.explore_at(?loc : Location, ?speed : real, ?allow_indirect : bool) ->
  if (!ego.knows(?loc)) then
    ego.discover_location(?loc)
  end
  ?k := ego.knowledge_about(?loc)
  ?k.quality := ego.weighted_average(?k.quality, ?loc.quality, ?speed)
  ?k.resources := ego.weighted_average(?k.resources, ?loc.quality, ?speed)
  ?k.quality_trust := ego.weighted_average(?k.quality_trust, 0.999999, ?speed)
  ?k.resources_trust := ego.weighted_average(?k.resources_trust, 0.999999, ?speed)

  if (?allow_indirect) then
    for each ?link in ?loc.links
      if (random() < p_find_links) then
        ego.explore_link(?link, ?speed)
        ?other := ?link.endpoints.filter(alter != ?loc).only()
        ego.explore_at(?other, ?speed, false)
      end
    end
  end

Migrant.knows_link(?link : Link) : bool :=
  ego.link_knowledge.filter(alter.subject = ?link).size() > 0

Migrant.knowledge_about_link(?link : Link) : InfoLink :=
  ego.link_knowledge.filter(alter.subject = ?link).only()

Migrant.explore_link(?link : Link, ?speed : real) ->
  if (!ego.knows_link(?link)) then
    ego.discover_link(?link)
  end
  ?k := ego.knowledge_about_link(?link)
  ?k.friction := ego.weighted_average(?k.friction, ?link.friction, ?speed)
  ?k.friction_trust := ego.weighted_average(?k.friction_trust, 0.999999, ?speed)

// while in transit
Migrant.explore_move() ->
  ego.explore_at(ego.destination, speed_expl_move, false)
  ego.explore_link(ego.location.links.filter(ego.destination in alter.endpoints).only(), speed_expl_move)


Migrant.weighted_average(?val : real, ?target : real, ?weight : real) : real :=
  ?val * (1-?weight) + ?target * ?weight

// (== mingle)
// the making contact part of mingle
Migrant
  | !ego.in_transit && ego.contacts.size() < n_contacts_max
  @ ?people.size() * p_keep_contact
  -> ?other := ?people.random()
     ego.contacts += [?other]
     ego.exchange_info(?other)
     if (?other.contacts.size() < n_contacts_max) then
       ?other.contacts += [ego]
     end
where ?people := ego.location.migrants - [ego]

// communication
Migrant
  | !ego.in_transit
  @ ?people.size() * p_info_contacts
  -> ?other := ?people.random()
     ego.exchange_info(?other)
where ?people := ego.contacts

/*
 * MOVING AROUND
 */
Migrant.move_rate() : real :=
  if ?relevantLinkKnowledge.isEmpty() || ?qualitySum = 0 then 0
  else if ?hereQuality > 0 then ?expectedQuality / ?hereQuality
  else 1
where ?relevantLinkKnowledge := ego.link_knowledge.filter(ego.location in alter.subject.endpoints)
      ?qualitySum := ?relevantLinkKnowledge.sum(ego.quality_link(alter))
      ?expectedQuality := ?relevantLinkKnowledge.sum(ego.quality_link(alter) ^ 2.0) / ?qualitySum
      ?hereQuality := ego.quality_loc(ego.location)

// (== decide_move)
Migrant.decide_destination() : Location :=
  ?relevantLinkKnowledge.weightedRandom(ego.quality_link(alter)).subject.endpoints.filter(alter != ego.location).only()
where ?relevantLinkKnowledge := ego.link_knowledge.filter(ego.location in alter.subject.endpoints)

// (== quality for links)
Migrant.quality_link(?info: InfoLink) : real :=
  ego.quality_loc(?other_side) / (1 + ?info.friction * qual_weight_frict)
where ?other_side := ?info.subject.endpoints.filter(alter != ego.location).only()

// (== quality for locations)
Migrant.quality_loc(?loc : Location) : real :=
  if ?infos.isEmpty() then ?closeness
  else ?quality + ?closeness + ?resources
where ?infos := ego.knowledge.filter(alter.subject = ?loc)
      ?info := ?infos.only()
      ?quality := ?info.quality * ?info.quality_trust
      ?closeness := ?loc.x * qual_weight_x
      ?resources := ?info.resources * ?info.resources_trust * qual_weight_res

// (== costs_move)
Migrant.move_cost(?destination : Location) : real :=
  costs_move * ego.location.links.filter(?destination in alter.endpoints).only().friction

// distance of the link the agent currently moves through
Migrant.move_distance() : real :=
  ego.location.links.filter(ego.destination in alter.endpoints).only().distance

// decide to move to a new location
Migrant
  | !ego.in_transit && !ego.link_knowledge.filter(ego.location in alter.subject.endpoints).isEmpty()
  @ 1 // ego.move_rate()
  -> ego.in_transit := true
     ego.destination := ego.decide_destination()
     ?link := ego.location.links.filter((ego.location in alter.endpoints) && (ego.destination in alter.endpoints)).only()
     ?link.visits += 1
     ego.capital -= ego.move_cost(ego.destination)
     ego.steps += 1
     ego.location.moves += 1

// people in transit arrive at their destination
Migrant
  | ego.in_transit
  @ transit_rate // / ego.move_distance()
  -> ego.location := ego.destination
     ego.location.visits += 1
     ego.in_transit := false
     if ego.location.type = "exit" then ego.die() end // arrival

// (== handle_departures)
World
  | true
  @ rate_dep
  -> ?migrant := new Migrant(capital := ini_capital, in_transit := false)
     ?migrant.contacts := (Migrant.all - [?migrant]).random(n_ini_contacts)
     for each ?other in ?migrant.contacts
       if (?other.contacts.size() < n_contacts_max) then
         ?other.contacts += [?migrant]
       end
     end
     ego.contacts_made += ?migrant.contacts.size()
     ?migrant.location := Location.all.filter(alter.type = "entry").random()
     ?migrant.location.visits += 1
     ?migrant.explore_at(?migrant.location, speed_expl_stay, true)
     for each ?exit in ?exits
       if random() < p_know_target then ?migrant.explore_at(?exit, speed_expl_stay, true) end
     end
where ?exits := Location.all.filter(alter.type = "exit")
